@Chapter Introduction

@Section What is SingularInterface?

The &GAP; package &SingularInterface; is a highly efficient and robust
unidirectional low-level interface to &Singular;
<Cite Key="singular" />. It is the outcome of an intensive collaboration
between core developers of both systems.
<P/>

The goal of this interface is to map all of &Singular;’s powerful
functionality into &GAP;. To achieve this it automatically wraps
<E>all</E> &Singular; datatypes and exports <E>all</E> of &Singular;’s
interface procedures to &GAP;. Furthermore, all procedures
of any contributed library can be loaded on demand. 
<P/>

This package is a rather <Q>faithful</Q> image of &Singular;; it does not
make an extensive attempt for a better integration of &Singular; into
the &GAP; ecosystem. This is intentionally left to other packages, which
are free to realize this in different ways.
<P/>

The development of &SingularInterface; has reached a $\beta$-phase and
is already actively used in some research projects. We hope to attract
more users in the near future, whose feedback will be crucial for a
successful further development.
<P/>

The motivation behind developing &SingularInterface; is the increasing
interest of various research projects in combining the strength of both
systems: &GAP; users get access to &Singular;'s polynomial arithmetic
and highly optimized Gröbner basis engine. &Singular; users gain a
second front end language for this engine -- in addition to the current
&Singular; language -- with an advanced object model primarily designed
for modeling higher mathematical structures, as well as access to &GAP;
as an expert system for group and representation theory.


@Section Conventions

Almost all functions provided by &SingularInterface; have a name
starting with one of the following prefixes:

* <C>SI_</C>: &Singular; interpreter functions such as <C>std</C> are prefixed with <C>SI_</C>, resulting in the &GAP; name <C>SI_std</C>.
* <C>SIL_</C>: &Singular; library functions such as <C>groebner</C> are prefixed with <C>SIL_</C>, resulting in the &GAP; name <C>SIL_groebner</C>.
* <C>_SI_</C>: Various low-level methods start with the prefix <C>_SI_</C>; these are for internal use and currently undocumented.
* <C>IsSI_</C>: These are names of types provided by &SingularInterface;, such as <C>IsSI_matrix</C>.

This makes it relatively easy to discover all functions provided by &SingularInterface;, namely by using &GAP;'s tab completion feature: Just type a prefix, such as <C>SI_</C>, then press the TAB key twice and &GAP; displays all matching identifiers.
<P/>

One notable exception to this naming scheme is the function <Ref Func="Singular"/>.


@Section Obtaining and installing SingularInterface

The latest &SingularInterface; release can be downloaded from
<URL>http://gap-system.github.io/SingularInterface/</URL>.
<P/>

For instructions on how to compile the &SingularInterface; source code, please refer to the <F>INSTALL</F> file accompanying it.

To check that the package has been successfully installed, start &GAP; and type:
<Log><![CDATA[
gap> LoadPackage( "SingularInterface" );
true]]></Log>



@Section TODO

- document  SI_LIB()
- document Singular()
- reference Rundbrief article


@Chapter Getting started

@Section First steps

<ManSection>
<Func Name="SI_LIB" Arg="libname"/>
<Description>
Instructs the Singular interpreter to load the library with the given
name. For example, we can load <C>matrix.lib</C> which provides
the &Singular; function <C>submat</C>, which is mapped to the &GAP;
function <C>SIL_submat</C>.
<Example><![CDATA[
gap> SIL_submat;
Error, Variable: 'SIL_submat' must have a value
gap> SI_LIB( "matrix.lib" );
true
gap> SIL_submat;
function( arg ) ... end]]></Example>
</Description>
</ManSection>

@Subsection Example

@InsertSystem Rundbrief_Example
