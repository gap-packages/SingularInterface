@Chapter Introduction

@Section What is SingularInterface?

The &GAP; package &SingularInterface; is a highly efficient and robust
unidirectional low-level interface to &Singular;
<Cite Key="singular" />. It is the outcome of an intensive collaboration
between core developers of both systems.

The goal of this interface is to map all of &Singular;’s powerful
functionality into &GAP;. To achieve this it automatically wraps
<E>all</E> &Singular; datatypes and exports <E>all</E> of &Singular;’s
interface procedures to &GAP;. Furthermore, all procedures
of any contributed library can be loaded on demand. 

This package is a rather <Q>faithful</Q> image of &Singular;; it does not
make an extensive attempt for a better integration of &Singular; into
the &GAP; ecosystem. This is intentionally left to other packages, which
are free to realize this in different ways.

The development of &SingularInterface; has reached a $\beta$-phase and
is already actively used in some research projects. We hope to attract
more users in the near future, whose feedback will be crucial for a
successful further development.



@Section Conventions

Almost all functions provided by &SingularInterface; have a name
starting with one of the following prefixes:

* <C>SI_</C>: &Singular; interpreter functions such as <C>std</C> are prefixed with <C>SI_</C>, resulting in the &GAP; name <C>SI_std</C>.
* <C>SIL_</C>: &Singular; library functions such as <C>groebner</C> are prefixed with <C>SIL_</C>, resulting in the &GAP; name <C>SIL_groebner</C>.
* <C>_SI_</C>: Various low-level methods start with the prefix <C>_SI_</C>; these are for internal use and currently undocumented.
* <C>IsSI_</C>: These are names of types provided by &SingularInterface;, such as <C>IsSI_matrix</C>.

One notable exception is the function <Ref Func="Singular"/>.


@Section TODO

- TODO: document  SI_LIB()
- TODO: document Singular()

@Chapter Getting started

@Section First steps




Insert Rundbrief example after this point:






@Chapter Rings and ring elements

@Section Constructors

<ManSection>
<Oper Name="SI_ring" Arg="char,indets,ord" Label="for an integer and two lists"/>
<Description>

Construct a &Singular; ring over the prime field of characteristic
<A>char</A> with the indeterminates given by <A>indets</A> and
ordering given by the list <A>ord</A>. The list <A>indets</A> is
allowed to be empty.

</Description>
</ManSection>

<ManSection>
<Oper Name="SI_poly" Arg="r,str" Label="for a Singular ring and a string"/>
<Description>
  Construct a polynomial in the &Singular; ring <A>r</A> using the string <A>str</A>.
</Description>
</ManSection>

<ManSection>
<Oper Name="SI_number" Arg="r,a" Label="for a Singular ring and a rational number"/>
<Description>
  Construct a number in the &Singular; ring <A>r</A> using the rational number <A>a</A>.
</Description>
</ManSection>


@Section Operations

<ManSection>
<Func Name="SI_imap" Arg="TODO" Label="for a TODO"/>
<Description>
  TODO
</Description>
</ManSection>

<ManSection>
<Func Name="SI_deg" Arg="r" Label="for a Singular polynomial"/>
<Description>
  Compute the degree of the polynomial <A>a</A>.
</Description>
</ManSection>

<ManSection>
<Func Name="SI_gcd" Arg="a,b" Label="for two Singular polynomials"/>
<Description>
	
  Compute the greatest common divisor of the two polynomial <A>a</A>
  and <A>b</A>.
  
</Description>
</ManSection>



@Chapter Matrices

@Section Constructors

In this section we discuss constructors for &Singular; matrices. We
also treat the three datatypes <C>ideal</C>, <C>module</C>, and
<C>vector</C> in this section as they are in first approximation
sparse representations of &Singular; matrices.

<ManSection>
<Oper Name="SI_matrix" Arg="r,c,str" Label="for two integers and a string"/>
<Description>

  Construct a matrix over the &Singular; ring <A>r</A> using the
  string <A>str</A>.

</Description>
</ManSection>


<ManSection>
<Oper Name="SI_ideal" Arg="r,str" Label="for a Singular ring and a string"/>
<Description>

  Construct an <Q>ideal</Q> in the &Singular; ring <A>r</A> using the
  string <A>str</A>.
  
  The datatype <C>ideal</C> in &Singular; is in first approximation a
  specialized data structure for matrices consisting of a single
  row. However, the print method in &Singular; prints them as a single
  column.

</Description>
</ManSection>

<ManSection>
<Oper Name="SI_module" Arg="mat" Label="for a Singular matrix"/>
<Description>
  
  Convert the &Singular; matrix <A>mat</A> into a &Singular;
  <Q>module</Q>.

  The datatype <C>module</C> in &Singular; is in first approximation a
  specialized sparse data structure for column oriented matrices with
  compressed columns. Each column has the &Singular; datatype
  <C>vector</C>.
  
</Description>
</ManSection>

<ManSection>
<Oper Name="SI_vector" Arg="r,str" Label="for a Singular ring and a string"/>
<Description>

  Construct a <Q>vector</Q> over the &Singular; ring <A>r</A> using the
  string <A>str</A>.

  The datatype <C>vector</C> in &Singular; is in first approximation a
  specialized sparse data structure for matrices consisting of a
  single column. However, the print method in &Singular; prints them
  as a single row or rather a list.
  
</Description>
</ManSection>


@Section Operations

<ManSection>
<Func Name="SI_ncols" Arg="mat" Label="for a Singular matrix"/>
<Description>
TODO (make sure to have examples for this and matrices, modules, vectors and ideals
</Description>
</ManSection>

<ManSection>
<Func Name="SI_nrows" Arg="mat" Label="for a Singular matrix"/>
<Description>
TODO
</Description>
</ManSection>


<ManSection>
<Func Name="SI_transpose" Arg="mat" Label="for a Singular matrix"/>
<Attr Name="TransposedMat" Arg="mat" Label="for a Singular matrix"/>
<Description>
TODO
</Description>
</ManSection>


<ManSection>
<Func Name="SI_det" Arg="mat" Label="for a Singular matrix"/>
<Attr Name="Determinant" Arg="mat" Label="for a Singular matrix"/>
<Attr Name="DeterminantMat" Arg="mat" Label="for a Singular matrix"/>
<Description>
TODO
</Description>
</ManSection>


<ManSection>
<Func Name="\[\]" Arg="TODO" Label="for a TODO"/>
<Description>
TODO
TODO: also mention SI_\[ as low level function behind it
</Description>
</ManSection>

<ManSection>
<Func Name="SI_std" Arg="TODO" Label="for a TODO"/>
<Description>
TODO
</Description>
</ManSection>

<ManSection>
<Func Name="SI_reduce" Arg="TODO" Label="for a TODO"/>
<Description>
TODO
</Description>
</ManSection>

<ManSection>
<Func Name="SI_lift" Arg="TODO" Label="for a TODO"/>
<Description>
TODO
</Description>
</ManSection>

<ManSection>
<Func Name="SI_syz" Arg="TODO" Label="for a TODO"/>
<Description>
TODO
</Description>
</ManSection>

<ManSection>
<Func Name="SI_modulo" Arg="TODO" Label="for a TODO"/>
<Description>
TODO
</Description>
</ManSection>

<ManSection>
<Func Name="SI_nres" Arg="TODO" Label="for a TODO"/>
<Description>
TODO
</Description>
</ManSection>




@Chapter Integer types

@Section Constructors


<ManSection>
<Oper Name="SI_int" Arg="TODO" Label="for a TODO"/>
<Description>
TODO
</Description>
</ManSection>

<ManSection>
<Oper Name="SI_intmat" Arg="TODO" Label="for a TODO"/>
<Description>
TODO
</Description>
</ManSection>

<ManSection>
<Oper Name="SI_intvec" Arg="TODO" Label="for a TODO"/>
<Description>
TODO
</Description>
</ManSection>

<ManSection>
<Oper Name="SI_bigint" Arg="TODO" Label="for a TODO"/>
<Description>
TODO
</Description>
</ManSection>

<ManSection>
<Oper Name="SI_bigintmat" Arg="TODO" Label="for a TODO"/>
<Description>
TODO
</Description>
</ManSection>

<ManSection>
<Oper Name="SI_bigintvec" Arg="TODO" Label="for a TODO"/>
<Description>
TODO
</Description>
</ManSection>



