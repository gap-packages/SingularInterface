 - create mailing list
 - add commit notifications
 - more constructors: vector, list, map, module, poly (quick, geobuckets),
   resolution, ring, qring?
 - number constructor (on the fly) for other coefficient domains
   finite fields, rationals, extensions
 - documentation
 - < and = methods
 - fix: -,*,/ etc. method for matrices gives mutable if both factors are 
   immutable
 - list type methods
 - more tests
 - cleanup: separate type-dependent stuff in libsing.*
 - look at qrings and see if they can be used in SI_matrix_from_String and
   places, do they work at all? How to make them?
 - performance test/memory management
 - proxy elements (esp. access to interpreter variables)
 - try to run manual examples
 - make place of libsingular.so and headers configurable at compile time
   --> more robust build system
 - more ToGAP functionality, especially polynomials, matrices of polys, etc.
 - disallow SaveWorkspace if libsing is loaded!
 - methods for polynomials (Value, coefficients, extrep)
 - sort out copying (Shallow/Structural) for GAP
 - highlevel interface: return value ring dependent, args not, make sure
   that we handle this case, possibly not using arg-list GAP func.
 - access to matrix entries, read and write
 - Setting of Singular attributes
 - dummy singular type collecting whatever e.g. user defined
 - magic for GAP lists as arguments, automatically transformed into singular
 
Future:
 - polymake objekte?
 - save/load workspace
 - revisit automatic type casts in singular interpreter
 - unify SingObj::cleanup and _SI_FreeFunc as far as possible
 - Explosion of objects like lists (rewrap pieces)
 - Assembling of objects losing the wrapping of the pieces
 - Constructor for PLURAL rings

Setting of Singular attributes: 
  currently they can only be set in the Singular interpreter and are
  then stored and reattached when an object goes back to Singular

