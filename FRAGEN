Which Singular-commands (high-level C++ interface using iiExprArith*)
produce a new ring? (We then probably have to notice this and put it
under GAP's Singular-ring-control!)

What is the "associated ring" of the result of a call to the high-level C++
interface using iiExprArith*? How safe is it to say:
  We observe the ground rings of the arguments of the call (some may have
  an associated ring, some not), assume that no two different rings show
  up in a single argument list, and assume that the result has that unique
  associated ring.
Under what conditions does this lead to problems?

Is it possible that the filled in sleftv structure resulting from a call to
iiExprArith* has a different rtyp from:
 NONE INT_CMD NUMBER_CMD POLY_CMD INTVEC_CMD INTMAT_CMD VECTOR_CMD
 IDEAL_CMD BIGINT_CMD MATRIX_CMD LIST_CMD LINK_CMD RING_CMD QRING_CMD
 RESOLUTION_CMD STRING_CMD MAP_CMD MODUL_CMD
In particular, is it ever possible that the e field of the sleftv structure
of the result is non-zero, or that any of the cases in sleftv::Data()
that do not just return the data entry occurs?

In short: Should one always call sleftv.Typ() and sleftv:Data() to get 
the actual resulting Singular object or is it good enough to look at
  .rtyp and .data
directly?

Does it create problems that in libsing we quite often call omAlloc
to get temporary objects but libsingular.so itself does not overload
the C++ allocator? Is this right? Or would we actually need a version
of libsingular.so that overloads the C++ allocator and delete methods
using omAlloc? Would this be a performance gain?


