// DO NOT EDIT THIS FILE BY HAND IT IS MACHINE GENERATED
#include "lowlevel_mappings.h"

#ifdef __cplusplus
extern "C" {
#endif /* ifdef __cplusplus */

Obj FuncSI_p_String(Obj self, Obj arg1) {
    int gtype, stype;
    UInt rnr;
    ring r = currRing;
    
    // Prepare input data
    poly var1 = (poly)GET_SINGOBJ(arg1, gtype, stype, rnr, r, 0);
    
    // Setup current ring
    if (r != currRing) rChangeCurrRing(r);
    
    // Call into Singular kernel
    char * res = p_String(var1,r);
    
    // Convert result for GAP and return it
    {
        UInt len = (UInt) strlen(res);
        Obj tmp = NEW_STRING(len);
        SET_LEN_STRING(tmp,len);
        strcpy(reinterpret_cast<char*>(CHARS_STRING(tmp)),res);
        return tmp;
    }
}

Obj FuncSI_p_Neg(Obj self, Obj arg1) {
    int gtype, stype;
    UInt rnr;
    ring r = currRing;
    
    // Prepare input data
    poly var1 = (poly)GET_SINGOBJ(arg1, gtype, stype, rnr, r, 0);
    var1 = (poly)COPY_SINGOBJ(var1, SINGTYPE_POLY, r);
    
    // Setup current ring
    if (r != currRing) rChangeCurrRing(r);
    
    // Call into Singular kernel
    poly res = p_Neg(var1,r);
    
    // Convert result for GAP and return it
    {
        Obj tmp = NEW_SINGOBJ_RING(SINGTYPE_POLY,res,rnr);
        return tmp;
    }
}

Obj FuncSI_pp_Mult_qq(Obj self, Obj arg1, Obj arg2) {
    int gtype, stype;
    UInt rnr;
    ring r = currRing;
    
    // Prepare input data
    poly var1 = (poly)GET_SINGOBJ(arg1, gtype, stype, rnr, r, 0);
    poly var2 = (poly)GET_SINGOBJ(arg2, gtype, stype, rnr, r, 0);
    
    // Setup current ring
    if (r != currRing) rChangeCurrRing(r);
    
    // Call into Singular kernel
    poly res = pp_Mult_qq(var1,var2,r);
    
    // Convert result for GAP and return it
    {
        Obj tmp = NEW_SINGOBJ_RING(SINGTYPE_POLY,res,rnr);
        return tmp;
    }
}

Obj FuncSI_pp_Mult_nn(Obj self, Obj arg1, Obj arg2) {
    int gtype, stype;
    UInt rnr;
    ring r = currRing;
    
    // Prepare input data
    poly var1 = (poly)GET_SINGOBJ(arg1, gtype, stype, rnr, r, 0);
    number var2 = (number)GET_SINGOBJ(arg2, gtype, stype, rnr, r, 0);
    
    // Setup current ring
    if (r != currRing) rChangeCurrRing(r);
    
    // Call into Singular kernel
    poly res = pp_Mult_nn(var1,var2,r);
    
    // Convert result for GAP and return it
    {
        Obj tmp = NEW_SINGOBJ_RING(SINGTYPE_POLY,res,rnr);
        return tmp;
    }
}

Obj FuncSI_p_Add_q(Obj self, Obj arg1, Obj arg2) {
    int gtype, stype;
    UInt rnr;
    ring r = currRing;
    
    // Prepare input data
    poly var1 = (poly)GET_SINGOBJ(arg1, gtype, stype, rnr, r, 0);
    var1 = (poly)COPY_SINGOBJ(var1, SINGTYPE_POLY, r);
    poly var2 = (poly)GET_SINGOBJ(arg2, gtype, stype, rnr, r, 0);
    var2 = (poly)COPY_SINGOBJ(var2, SINGTYPE_POLY, r);
    
    // Setup current ring
    if (r != currRing) rChangeCurrRing(r);
    
    // Call into Singular kernel
    poly res = p_Add_q(var1,var2,r);
    
    // Convert result for GAP and return it
    {
        Obj tmp = NEW_SINGOBJ_RING(SINGTYPE_POLY,res,rnr);
        return tmp;
    }
}

Obj FuncSI_p_Minus_mm_Mult_qq(Obj self, Obj arg1, Obj arg2, Obj arg3) {
    int gtype, stype;
    UInt rnr;
    ring r = currRing;
    
    // Prepare input data
    poly var1 = (poly)GET_SINGOBJ(arg1, gtype, stype, rnr, r, 0);
    var1 = (poly)COPY_SINGOBJ(var1, SINGTYPE_POLY, r);
    poly var2 = (poly)GET_SINGOBJ(arg2, gtype, stype, rnr, r, 0);
    poly var3 = (poly)GET_SINGOBJ(arg3, gtype, stype, rnr, r, 0);
    
    // Setup current ring
    if (r != currRing) rChangeCurrRing(r);
    
    // Call into Singular kernel
    poly res = p_Minus_mm_Mult_qq(var1,var2,var3,r);
    
    // Convert result for GAP and return it
    {
        Obj tmp = NEW_SINGOBJ_RING(SINGTYPE_POLY,res,rnr);
        return tmp;
    }
}

Obj FuncSI_p_Plus_mm_Mult_qq(Obj self, Obj arg1, Obj arg2, Obj arg3) {
    int gtype, stype;
    UInt rnr;
    ring r = currRing;
    
    // Prepare input data
    poly var1 = (poly)GET_SINGOBJ(arg1, gtype, stype, rnr, r, 0);
    var1 = (poly)COPY_SINGOBJ(var1, SINGTYPE_POLY, r);
    poly var2 = (poly)GET_SINGOBJ(arg2, gtype, stype, rnr, r, 0);
    poly var3 = (poly)GET_SINGOBJ(arg3, gtype, stype, rnr, r, 0);
    
    // Setup current ring
    if (r != currRing) rChangeCurrRing(r);
    
    // Call into Singular kernel
    poly res = p_Plus_mm_Mult_qq(var1,var2,var3,r);
    
    // Convert result for GAP and return it
    {
        Obj tmp = NEW_SINGOBJ_RING(SINGTYPE_POLY,res,rnr);
        return tmp;
    }
}


#ifdef __cplusplus
}
#endif /* ifdef __cplusplus */
