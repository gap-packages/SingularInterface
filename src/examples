LoadPackage("libsing");
Singular("int ver=system(\"version\");");
SI_ValueOfVar("ver");
SI_ValueOfVar("version");   # gives fail
Singular("print(ver);");
SI_LastOutput();   # gives version number as string
SI_LastOutput();   # gives fail
Singular("string a=\"Max\";");
SI_ValueOfVar("a");
Singular("intvec x=1,1,2,3,5,8,13;");
SI_ValueOfVar("x");
Singular("intmat y[3][5]=1,3,5,7,8,9,10,11,12,13;");
SI_ValueOfVar("y");
s := SI_ring(3,["a","b"]);
i := SI_Indeterminates(s);
_SI_p_String(i[1]);
_SI_p_String(i[2]);
a := _SI_MONOMIAL(s,2,[2,3]);
aa := _SI_MULT_POLY_NUMBER(a,2);
#aa := _SI_pp_Mult_nn(a,2);
b := _SI_MONOMIAL(s,2,[4,5]);
c := _SI_p_Add_q(a,b);
d := _SI_pp_Mult_qq(a,b);
e := _SI_p_Neg(a);
_SI_p_String(a);
_SI_p_String(b);
_SI_p_String(c);
_SI_p_String(d);
_SI_p_String(e);
Unbind(a);
Unbind(b);
Unbind(c);
Unbind(d);
Unbind(e);
Unbind(i);
Unbind(s);
Unbind(aa);
1;2;3;
GASMAN("collect");
SI_CleanupRings();
GASMAN("collect");
_SI_ElCounts;
i:=SI_bigint(42);
_SI_Intbigint(i) = 42;
i:=SI_bigint(42^42);
_SI_Intbigint(i) = 42^42;
iv:=SI_intvec([1..100]);
m:=List([1..10],i->List([1..10],j-> j*i));
im:=SI_intmat(m);
_SI_Plistintvec(iv) = [1..100];
_SI_Matintmat(im) = m;
s := SI_ring(17,["a","b"]);
ind := SI_Indeterminates(s);
id := SI_ideal(ind);
x := _SI_MONOMIAL(s,12,[2,3]);
y := _SI_MONOMIAL(s,2,[4,3]);
_SI_p_Add_q(x,y);
id := SI_ideal([x,y]);
p1 := SI_Proxy(id,1);
p2 := SI_Proxy(id,2);
_SI_COPY_POLY(p1);
_SI_COPY_POLY(p2);
_SI_p_Add_q(x,p2);
_SI_p_Add_q(p2,y);
_SI_p_Add_q(p2,p1);

